{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","event","this","onAdd","track","onRemove","isRemoval","className","onClick","name","artist","album","renderAction","React","Component","TrackList","tracks","map","key","id","Playlist","handleNameChange","onNameChange","target","value","onChange","defaultValue","playlistTracks","onSave","SearchBar","state","term","handleTermChange","search","setState","onSearch","placeholder","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7bc4105d.chunk.js","sourcesContent":["const clientId = 'cb3cda4b52d743c0afa3585826513587';\r\nconst redirectUri = 'https://tungtwister.github.io/SoundBoard/';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() \r\n  {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) \r\n    {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else \r\n    {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) \r\n  {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) \r\n  {\r\n    if (!name || !trackUris.length) \r\n    {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackUris})\r\n        });\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) \r\n  {\r\n    super(props);\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack(event) \r\n  {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack(event) \r\n  {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  renderAction() \r\n  {\r\n    if (this.props.isRemoval) \r\n    {\r\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n    }\r\n    return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n  }\r\n\r\n  render() \r\n  {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {\r\n          this.props.tracks.map(track => {\r\n            return <Track track={track}\r\n                          key={track.id}\r\n                          onAdd={this.props.onAdd}\r\n                          isRemoval={this.props.isRemoval}\r\n                          onRemove={this.props.onRemove} />\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './Playlist.css';\r\n\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) \r\n  {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  render() \r\n  {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'} />\r\n        <TrackList tracks={this.props.playlistTracks}\r\n                   isRemoval={true}\r\n                   onRemove={this.props.onRemove} />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) \r\n  {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: ''\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  handleTermChange(event) \r\n  {\r\n    this.setState({term: event.target.value});\r\n  }\r\n\r\n  search() \r\n  {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  render() \r\n  {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song Title\" onChange={this.handleTermChange} />\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() \r\n  {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  search(term) \n  {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  addTrack(track) \n  {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) \n    {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) \n  {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) \n  {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() \n  {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() \n  {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}